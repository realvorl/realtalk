"use strict";(self.webpackChunkhopage=self.webpackChunkhopage||[]).push([[7554],{4641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var o=n(5893),i=n(1151);const s={slug:"yt-playlist-time",title:"Why no total time?",authors:["veo"],tags:["javascript","extension","browser"],sidebar_position:1},r='Another entry: "If you don\'t like it, change it!"',a={permalink:"/blog/yt-playlist-time",source:"@site/blog/2024/2024-01-08-yt-playlist-time/yt-playlist-time.md",title:"Why no total time?",description:"If you're an avid YouTube user, you know the struggle of keeping track of the total time you're about to invest in watching a playlist or queue. Whether you're lining up tutorials, your favorite gaming sessions, or a list of must-watch documentaries, understanding how much time you're committing can be crucial. This is where the YouTube Queue Duration Tool comes into play\u2014a simple browser extension that sums up the total duration of videos in your YouTube queue.",date:"2024-01-08T00:00:00.000Z",formattedDate:"January 8, 2024",tags:[{label:"javascript",permalink:"/blog/tags/javascript"},{label:"extension",permalink:"/blog/tags/extension"},{label:"browser",permalink:"/blog/tags/browser"}],readingTime:2.91,hasTruncateMarker:!1,authors:[{name:"Viorel PETCU",title:"Maintainer and creator of this blog",url:"https://github.com/realvorl",imageURL:"https://github.com/realvorl.png",key:"veo"}],frontMatter:{slug:"yt-playlist-time",title:"Why no total time?",authors:["veo"],tags:["javascript","extension","browser"],sidebar_position:1},unlisted:!1,prevItem:{title:"Start Here",permalink:"/blog/welcome"},nextItem:{title:"Zero-Cost Monitoring",permalink:"/blog/zero-cost-monitoring-solution"}},l={authorsImageUrls:[void 0]},u=[{value:"Why You Need It",id:"why-you-need-it",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Under the Hood",id:"under-the-hood",level:2},{value:"Wrapping Up",id:"wrapping-up",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"If you're an avid YouTube user, you know the struggle of keeping track of the total time you're about to invest in watching a playlist or queue. Whether you're lining up tutorials, your favorite gaming sessions, or a list of must-watch documentaries, understanding how much time you're committing can be crucial. This is where the YouTube Queue Duration Tool comes into play\u2014a simple browser extension that sums up the total duration of videos in your YouTube queue."}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsx)(t.p,{children:"I always wondered why this is not a feature already. Who cares?"}),(0,o.jsx)(t.p,{children:"Now we can change it."})]}),"\n",(0,o.jsx)(t.h2,{id:"why-you-need-it",children:"Why You Need It"}),"\n",(0,o.jsx)(t.p,{children:"In our fast-paced world, time management is key. Whether you're taking a quick break or settling in for a long study session, knowing the total playtime helps you plan better. The YouTube Queue Duration Tool is perfect for:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Educational Content"}),": Plan your learning sessions by knowing how long it will take to go through tutorial videos."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Entertainment"}),": Balance your leisure time and breaks by watching queued videos."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Workouts"}),": Queue up your exercise or yoga videos and get the total workout time."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,o.jsx)(t.p,{children:"The tool is a piece of JavaScript that runs in the background of your browser. Once you've added videos to your YouTube queue, the tool:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Accesses the queue container element in the DOM."}),"\n",(0,o.jsx)(t.li,{children:"Iterates over the listed videos, scraping the duration of each one."}),"\n",(0,o.jsx)(t.li,{children:"Parses the durations and converts them into seconds."}),"\n",(0,o.jsx)(t.li,{children:"Sums up the seconds and converts the total back into hours, minutes, and seconds."}),"\n",(0,o.jsx)(t.li,{children:"Displays the total duration neatly at the top of your queue."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"under-the-hood",children:"Under the Hood"}),"\n",(0,o.jsx)(t.p,{children:"The core of the extension is a simple, yet efficient, interval-based checking system that waits until all video items are loaded on the page. Here's the logic:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'function parseTimeToSeconds(timeString) {\n  const parts = timeString.split(\':\');\n  let seconds = 0;\n  let multiplier = 1;\n\n  while (parts.length > 0) {\n    seconds += multiplier * parseInt(parts.pop(), 10);\n    multiplier *= 60;\n  }\n\n  return seconds;\n}\n\nfunction formatSecondsAsTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  seconds %= 3600;\n  const minutes = Math.floor(seconds / 60);\n  seconds %= 60;\n  return `${hours}:${String(minutes).padStart(2, \'0\')}:${String(seconds).padStart(2, \'0\')}`;\n}\n\nfunction checkPlaylistTimes() {\n  let totalSeconds = 0;\n  let queueTitle = null\n  try {\n    const sideBar = document.querySelector("#secondary");\n    const playList = sideBar.querySelector("#playlist");\n    const items = playList.querySelector("#items");\n    const times = items.querySelectorAll("#time-status");\n\tconst queueH3 = playList.querySelector("h3");\n\tqueueTitle = queueH3.querySelector("yt-formatted-string");\n    for (let i = 0; i < times.length; i++) {\n      totalSeconds += parseTimeToSeconds(times[i].innerText);\n    }\n  } catch (e) {\n    console.warn(\'An exception occurred:\', e);\n    return;\n  }\n  const formattedTotalTime = formatSecondsAsTime(totalSeconds);\n  //console.log(`Total Playlist Time: ${formattedTotalTime}`);\n  const prefix = queueTitle.innerText.split(" ")[0];\n  queueTitle.innerText = `Queue (${formattedTotalTime})`;\n}\n\n// Set an interval to sum up the times every second\nsetInterval(checkPlaylistTimes, 1000);\n\n'})}),"\n",(0,o.jsxs)(t.p,{children:["By adding it to your ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"User Javascript and CSS"})})," extension."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"suggested configuration",src:n(1974).Z+"",width:"685",height:"253"})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["I shown how to do this in a previous ",(0,o.jsx)(t.a,{href:"https://dev.to/realvorl/if-you-don-t-like-it-change-it-ag5",children:"DEV.TO post"})]})}),"\n",(0,o.jsxs)(t.p,{children:["As seen in the screenshots, the total duration of the queued videos is displayed in a clear format (",(0,o.jsx)(t.code,{children:"HH:MM:SS"}),"), giving you a quick glimpse of the time required for your current queue."]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"center"},children:"Before"}),(0,o.jsx)(t.th,{style:{textAlign:"center"},children:"After"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"center"},children:(0,o.jsx)(t.img,{alt:"before",src:n(6174).Z+"",width:"440",height:"405"})}),(0,o.jsx)(t.td,{style:{textAlign:"center"},children:(0,o.jsx)(t.img,{alt:"after",src:n(8092).Z+"",width:"440",height:"405"})})]})})]}),"\n",(0,o.jsx)(t.h2,{id:"wrapping-up",children:"Wrapping Up"}),"\n",(0,o.jsx)(t.p,{children:"The YouTube Queue Duration Tool is a testament to how a little convenience can go a long way. For developers, the source code is a concise example of manipulating the DOM with pure JavaScript and can serve as a template for similar projects."}),"\n",(0,o.jsx)(t.p,{children:"Stay tuned for updates, and happy queueing!"}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.p,{children:"Keep on changing things."}),"\n",(0,o.jsx)(t.p,{children:"Viorel PETCU"})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},6174:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/image-1-726ffeecfce179a211900d54e226da7c.png"},1974:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/image-2-1257515dc7066ce6d563fc9bb30d403f.png"},8092:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/image-3f187040949f07f2f72b377cb6e564e2.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var o=n(7294);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);